--- break

keywords: git,introduction

link: http://www.vogella.com/tutorials/Git/article.html#git 

- version control system allows you to track the history of a collection of files

- allows you to revert the collection of files to another version

- collection of files and their complete history are stored in a repository

- distributed version control system does not necessarily have a central server which
  stores the data

- copying process is typically called cloning in distributed version control system

- each cloned repository is a full copy of the repository (full history of the
  collection of files and same functionality as the original repository)

- user performs version control operations against their local (cloned) repository

- repository can be configured to be in one of two states

	bare: are used on servers to share changes coming from different developers

	non-bare: allow you to create new changes through modification of files
	and to create new versions in the repository

- git allows user to sync local repo with other (remote) repositories (push, fetc and
  pull changes from other/remote repositories)

--- break

keywords: git,branch,merge

link: http://www.vogella.com/tutorials/Git/article.html#gitdefintion_branching

- supports branching (work on different version fo your collection of files)

- branch seperates these versions and allows user to switch between them

- local to the repository (does not have to have counterpart in remote repository)

- local branches can be compared with other local branches and with remote tracking
  branches (proxies state of a branch in another remote repository) 

- changes from different branches can be combined (merged)

--- break

keywords: committing,objects,commit

- commits create a new commit object in the repository

- commit object is addressable via a SHA-1 checksum (40 bytes long secure hash of the
  content of the files, directories and complete hsitory up to the new commit, the
  committer and several other factors)

- checksum ensures that files cannot be manipulated in repository

- commit object points to individual files via a tree object

- files stored in repository as blob objects (might be packed for better performance
  and compact storage)

- blocks are addressed via their SHA-1 hash

--- break

keywords: file,states

link: http://www.vogella.com/tutorials/Git/article.html#gitterminology_filelifecycle

- file in working tree can have following states

	untracked: not tracked by repository (neither staged or committed)

	tracked: committed and not staged

	staged: staged to be included in next commit

	dirty/modified: file has changed but change is not staged

--- break

keywords: global,configuration,config

link: http://www.vogella.com/tutorials/Git/article.html#setup_configuration

- store global settings in .gitconfig located in user home directory

- configuration for committer and author

- configuration is glocal when --global flag is specified, otherwise config setting
  is specific to current repository

- system wide configuration can be set in /etc/gitconfig, use --system flag (must
  have sufficient rights)

example:

	git config --global user.name "Example Name" 	# user which will be used

	git config --global user.email "user@gmail.com"	# email which will be used

	git config --global push.default simple 	# push only current branch

	git config --global push.default matching	# put all matching branches

	git config --global color.ui true		# enable color highlighting
	git config --global color.status auto
	git config --global color.branch auto

	git config --list				# list local repo settings

	git config --global --list			# global settings

-- break 

keywords: gitignore,ignore

link: http://www.vogella.com/tutorials/Git/article.html#d285772e1007

- can be configured to ignore certain files and directories

- configured in a .gitignore file, can be in any directory and can contain patterns
  for files

example:

	# ignore all bin directories
	bin/

	# ignore all target directories
	target/

	# ignore all files ending with ~
	*~

- use --force parameter to git add to add ignored files to staging area

- create global .gitignore for cross repository exclusion using global config option
  core.excludesfile

- can also create local per-repo rules by editting .git/info/exclude (file not
  committed with repository)

--- break

keywords: empty,directory,.gitkeep

link: http://www.vogella.com/tutorials/Git/article.html#ignorekeep_gitkeep

- git ignores empty directory (does not put under version control)

- to track common practice is to put a file called .gitkeep in directory (file can
  actually be called anything)

--- break

keywords: create,repository

link: http://www.vogella.com/tutorials/Git/article.html#firstgit_repocreation 

syntax:
	
	# initialize git repository in current directory
	git init

- all files inside repository folder excluding .git folder are the working tree	

--- break

keywords: repository,status

link: http://www.vogella.com/tutorials/Git/article.html#firstgit_repostatus

syntax:

	git status

- shows working tree status (which files have changed, staged and which are not
  part of staging area)

- also show merge conflicts

--- break

keywords: add,staging,stage,area

link: http://www.vogella.com/tutorials/Git/article.html#firstgit_repoadd 

- before commiting changes add files to the staging area

syntax:

	git add FILESPEC

** if you change file before committing you must add again **

--- break

keywords: committ

link: http://www.vogella.com/tutorials/Git/article.html#firstgit_repocommit

- aftering staging files you commit them to the repository

- creates a new commit object in repository and the HEAD reference points to the
  new commit

syntax:

	git commit -m "Initial commit"

- if you leave -m options out the default editor is started

--- break

keywords: log,history

link: http://www.vogella.com/tutorials/Git/article.html#firstgitresult

- show git log

syntax:

	git log

--- break:

keywords: remove,file

link: http://www.vogella.com/tutorials/Git/article.html#firstgit_deletefile

- to delete files from your working tree and record deletion of file in staging area

syntax:

	method 1:

	git rm FILESPEC

	method 2:
	
	rm FILE
	git add -A .	# -A flag adds, modifies and removes files

--- break:

keywords: remove,file,staging,area

link: http://www.vogella.com/tutorials/Git/article.html#firstgit_reset

- remove a file from the staging area which was added through git add

syntax:

	git reset FILESPEC	# remove FILESPEC from staging area

--- break:

keywords: correct,amend,commit,message

link: http://www.vogella.com/tutorials/Git/article.html#firstgit_amend

- replace the last commit message (only for commits which have not been pushed to a
  public branch or another repository)

syntax:

	git commit --amend -m "NEW COMMIT MESSAGE"

- creates new commit ID and users may have based work on old commit ID, they will
  need to migrate their work based on new commit

--- break

keywords: remove,file,.gitignore

link: http://www.vogella.com/tutorials/Git/article.html#untrack

- remove last version of file in repository, after updating .gitignore (git will stop
  tracking from this point forward)

syntax:

	git rm [-r] --cached FILESPEC	# -r for directory (recursive)

- does not remove it from the history, use git filter-branch for that

--- break

keywords: remote,repositories

link: http://www.vogella.com/tutorials/Git/article.html#remotes

- URLs in repository to other remote repositores hosted on internet, lcoally or in 
  network

- can be used to sync changes of serveral repositories

- local repo can be connected to multiple remote repositories

- when you clone repo, git implicitly creates a remote named origin by default which
  links back to cloned repository

- an init doesn't create orgin remote automatically

--- break

keywords: base,repository,repositories

link: http://www.vogella.com/tutorials/Git/article.html#bareremotes_definition 

- base repository: repository without a working tree

syntax:

	git init --bare		# create a bare repository

--- break

keywords: remote,repositories,repository,add

link: http://www.vogella.com/tutorials/Git/article.html#remotes_remoteadd

- you can add multiple remote repositories

syntax:

	git remote add NAME URL

--- break

keywords: remote,repositories,repository,sync

link: http://www.vogella.com/tutorials/Git/article.html#remotes_remote_synchronize 

syntax:

	git push NAME

example:

	git push origin

--- break

keywords: remote,repositories,repository,show,list

link: http://www.vogella.com/tutorials/Git/article.html#remotes_showremote 

syntax:

	git remote [-v]			# show details about remotes

	git remote show NAME		# show details of remote called NAME

--- break

keywords: clone,repository,repositories,remote

link: http://www.vogella.com/tutorials/Git/article.html#cloneremotes

- clone repository and checkout a working tree 

syntax:

	git clone URL .

--- break

keywords: push,changes,remote

link: http://www.vogella.com/tutorials/Git/article.html#cloneremotes_push

- by default push sends data from your current branch to the same branch of the
  remote repository

syntax:

	git push [REPOSITORY]

example:

	git push ../remote-repo.git	# push changes to remote-repo.git

- by default you can only push to bare repositories and change much result in a
  fast-forward merge

--- break

keywords: pull,changes,remote

link: http://www.vogella.com/tutorials/Git/article.html#cloneremotes_pull

- by default pull pulls in changes from repository working tree was cloned from

syntax:

	git pull [REPOSITORY]

example:

	git pull ../remote-repo.git	# pull changes from remote-repo.git

- the pull command is actually a shortcut for git fetch followed by the git merge
  command (or git rebase depending on configuration)

--- break

keywords: online,remote,repository,repositories

link: http://www.vogella.com/tutorials/Git/article.html#remote

- Git supports several transport protocols to connect to other repositories

- native protocol is called git (port 9148)

- also supports SSH, HTTP and HTTPS

syntax:

	git clone git://URL

	git clone ssh://USER@URL

	git clone http://URL

	git clone https://URL

--- break

keywords: remote,repository,repositories,proxy,configuration

link: http://www.vogella.com/tutorials/Git/article.html#remote_proxy

- will use standard http_proxy and/or https_proxy environment variables

- configure git settings to specify proxy settings as well

syntax:

	git config --global http.proxy http://proxy:8080

	git config --get http.proxy		# check proxy setting

	git config --global --unset http.proxy	# remove proxy setting


